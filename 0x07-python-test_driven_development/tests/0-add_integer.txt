# 0-add_integer.txt
===============================
How to Use 0-add_intteger.py
===============================

This library is very simple, since it only has one function called
``add_integer()``.

Numbers
=======

``add_integer()`` returns the sum of its arguments. For integers or floats,
that value is equivalent to using the ``+`` operator.

::

   >>> add_integer = __import__('0-add_integer').add_integer
   >>> add_integer(2, 3)
   5
   >>> add_integer(-1, -7)
   -8
   >>> add_integer(-20, 5)
   -15
   >>> add_integer(0, 0)
   0
   >>> add_integer(29, 0)
   29


It also works with floating-point values.

::

   >>> add_integer(2.0, 3)
   5
   >>> add_integer(-10.5, 3)
   -7


Non-Numbers
===========

Raise error message in cases that one of the variables are not integers or
floats

::

   >>> add_integer('s', 7)
   Traceback (most recent call last):
   TypeError: a must be an integer

   >>> add_integer("Holberton", 9)
   Traceback (most recent call last):
   TypeError: a must be an integer

   >>> add_integer(2, "School")
   Traceback (most recent call last):
   TypeError: b must be an integer

   >>> add_integer(100, 'H')
   Traceback (most recent call last):
   TypeError: b must be an integer

   >>> add_integer(float(2**1023), float(2**1023))
   Traceback (most recent call last):
   OverflowError: overflow error

   >>> add_integer()
   Traceback (most recent call last):
   TypeError: add_integer() missing 1 required positional argument: 'a'
